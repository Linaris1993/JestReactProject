[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import { render, screen } from '@testing-library/react';\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul> \r\n    <li>Red</li> \r\n    <li>Blue</li> \r\n    <li>Green</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nrender(<ColorList />);","type":"code","id":"lj7ng"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\r\n  render(<ColorList />);\r\n\r\n//getByRole\r\nexpect(\r\n() => screen.getByRole('textbox')\r\n).toThrow(); //will throw an error if textbox doesn't exist, test will pass\r\n\r\n//gueryByRole\r\nexpect(screen.queryByRole('textbox')).toEqual(null); //same here\r\n\r\n//findByRole\r\nlet errorThrown = false;\r\ntry {\r\nawait screen.findByRole('textbox');\r\n} catch (err) {\r\nerrorThrown = true;\r\n}\r\nexpect(errorThrown).toEqual(true);\r\n});","type":"code","id":"jdo0l"},{"content":"test('getBy, queryBy, findBy finding 1 element', async () => {\n  render(<ColorList />);\n\n  expect(\n    screen.getByRole('list')\n    ).toBeInTheDocument()\n\n   expect(\n    screen.queryByRole('list')\n    ).toBeInTheDocument()\n\n     expect(\n    await screen.findByRole('list')\n    ).toBeInTheDocument()\n});","type":"code","id":"b83cc"},{"content":"test('getBy, queryBy, findBy finding > 1 elements', async () => {\r\n  render(<ColorList />);\r\n  \r\nexpect(\r\n() => screen.getByRole('listItem')\r\n).toThrow(); //will throw an error if textbox doesn't exist, test will pass\r\n\r\nexpect(\r\n  screen.queryByRole('listItem')\r\n  ).toThrow;\r\n\r\nlet errorThrown = false;\r\ntry {\r\nawait screen.findByRole('listItem');\r\n} catch (err) {\r\nerrorThrown = true;\r\n}\r\nexpect(errorThrown).toEqual(true);\r\n});","type":"code","id":"sdkev"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\r\n  render(<ColorList />);\r\n//find all by need async\r\n  expect(\r\n    screen.getAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n expect(\r\n    screen.queryAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n   expect(\r\n    await screen.findAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n});","type":"code","id":"jf6p8"},{"content":"test('getAllBy, queryAllBy, findAllBy', () => {\n  render(<ColorList />);\n\n  const element = screen.queryByRole('textbox');\n  expect(element).not.toBeInTheDocument();\n});","type":"code","id":"mbker"},{"content":"import { useState, useEffect } from 'react';\r\n\r\nfunction fakeFetchColors() {\r\n  return Promise.resolve(\r\n    ['red', 'green', 'bleu']\r\n  );\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState( [] );\r\n\r\n  useEffect(() => {\r\n    fakeFetchColors()\r\n    .then(c => setColors(c));\r\n  }, []);\r\n\r\n  const renderColors = colors.map(color => {\r\n    return <li key={color}>{color}</li>\r\n  });\r\n\r\n  return<ul>{renderColors}</ul>\r\n}\r\n\r\nrender(< LoadableColorList />)","type":"code","id":"gson3"},{"content":"test('Favor findBy or findBy when data fetching', async() => {\r\n\r\nrender(< LoadableColorList />);\r\n\r\nconst els = await screen.findAllByRole('listitem');\r\nexpect(els).toHaveLength(3);\r\n});","type":"code","id":"ybpkf"},{"content":"","type":"code","id":"a68kv"}]